
import java.awt.geom.Point2D;
import java.io.*;
import java.util.*;
import javax.swing.JFrame;

import org.jfree.ui.ApplicationFrame;
import org.math.plot.Plot2DPanel;
import peakml.*;
import peakml.IPeak.RelationCompare;
import peakml.io.*;
import peakml.io.peakml.*;

public class peakTest extends ApplicationFrame {
	
	static ArrayList<Point2D.Double> points = new ArrayList<Point2D.Double>();
	static double[] x = new double[64];
	static double[] y = new double[64];
	static int count = 0;

	static Plot2DPanel plot = new Plot2DPanel();
	
	public peakTest(String title) {
		super(title);
		// TODO Auto-generated constructor stub
	}
	
	public static void recursive(IPeak peak)
	{
		Class<? extends IPeak> cls = peak.getClass();
		if (cls.equals(IPeakSet.class))
		{
			for (IPeak p : (IPeakSet<IPeak>) peak){
				recursive(p);
			}
		}
		else if (cls.equals(MassChromatogram.class)){
			MassChromatogram mc = (MassChromatogram) peak;
			Vector<Peak> mcPeaks = mc.getPeaks();
			for (IPeak mcp : mcPeaks){
				System.out.println(mcp.getMass() + " - " + mcp.getIntensity() + " - " + mcp.getRetentionTime());
			}
			System.out.println("///////////////////////////////");
			//			if (peak.getMass() >= 70 && peak.getMass() <= 71){
//				points.add(new Point2D.Double(peak.getRetentionTime(), peak.getIntensity()));
//			}
//			System.out.println(peak.);
//			if (peak.getRetentionTime() >= 400 && peak.getRetentionTime() <= 520){
//				points.add(new Point2D.Double(peak.getMass(), peak.getIntensity()));
//			}
		}
		else if (cls.equals(BackgroundIon.class)){
		}
	}

	public static void main(String args[])
	{
		try
		{
			ParseResult result = PeakMLParser.parse(new FileInputStream("DataFiles/std1/peakml/std1_POS_filtered15000.peakml"), true);
			Header header = result.header;
			IPeakSet<IPeak> peakset = (IPeakSet<IPeak>) result.measurement;
			
			// unpack IPeakSet's in the IPeakSet
//			Vector<IPeak> unpacked = IPeak.unpack(peakset);
			
//			chosenPeak = unpacked.elementAt(20);
//			RelationCompare<IPeak> compare = null;
//			Vector<IPeak> relatedPeaks = chosenPeak.findRelatedPeaks(unpacked, 0, 3000, compare);
			
			// traverse the data recursively
//			recursive(peakset);
			
			boolean mcFound = false;
			do{
				for(IPeak p : peakset){
					if (p.getMass() == 94.04512338463023){
						if (p.getClass() == MassChromatogram.class){
							MassChromatogram mc = (MassChromatogram) p;
							Vector<Peak> mcPeaks = mc.getPeaks();
							for (IPeak mcp : mcPeaks){
								points.add(new Point2D.Double(mcp.getRetentionTime(), mcp.getIntensity()));
							}
							System.out.println(points.size());
							mcFound = true;
						}
						mcFound = true;
						break;
					}
				}
			}while(!mcFound);

//			Vector<IPeak> chosenPeaks = peakset.getPeaksInRetentionTimeRange(400, 520);
//			for (IPeak p : chosenPeaks){
////				if (p.getMass() >=0 && p.getMass() < 100)
//					points.add(new Point2D.Double(p.getMass(), p.getIntensity()));
//			}
//
			//Sort points in ArrayList points
//			Collections.sort(points, new PointCmp());
			count = 0;
			for (Point2D.Double currentPoint : points){
				x[count] = currentPoint.x;
				y[count] = currentPoint.y;
				count++;
//				if (count == 1000){
//					break;
//				}
			}
			
			plot.setAxisLabels("RT", "Intensity");

			plot.addLinePlot("line plot test", x, y);	
//			plot.addBarPlot("bar plot", x, y);
			
			JFrame frame = new JFrame("Testing");
			frame.setSize(700, 700);
			frame.setContentPane(plot);
			frame.setVisible(true);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
}
