import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import java.io.*;
	
public class sizeProbs {
		
		private static JFrame frame;
		private static ImagePanel linkPanel;
		private static JScrollPane linkScroll;
		private static BufferedImage pathImg;
		private static ArrayList<JButton> regButtons;
		private static ArrayList<Ident> buttonDetails;
		private static ArrayList<ArrayList<Integer>> relatedGroups;
		private static Ident[] fileInput;
		private static double xScaleFactor;
		private static double yScaleFactor;
		
		// initialize GUI components and global variables
		public static void initComponents(){
			frame = new JFrame("Background Image + Links");
		    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		    
		    frame.setExtendedState(frame.getExtendedState() | JFrame.MAXIMIZED_BOTH);
		    frame.setVisible(true);
		    
		    frame.setLayout(null);
		    
		    linkPanel = new ImagePanel();
		    linkPanel.setLayout(null);
		    linkPanel.setOpaque(false);
		    linkScroll = new JScrollPane(linkPanel);
		    
		    regButtons = new ArrayList<JButton>();
		    buttonDetails = new ArrayList<Ident>();
		    relatedGroups = new ArrayList<ArrayList<Integer>>();
		    
		    frame.add(linkScroll);
		    frame.setContentPane(linkScroll);
		}
		
		// count lines in a given file
		public static int countLines(String filename) throws IOException {
		    InputStream is = new BufferedInputStream(new FileInputStream(filename));
		    try {
		        byte[] c = new byte[1024];
		        int count = 0;
		        int readChars = 0;
		        boolean empty = true;
		        while ((readChars = is.read(c)) != -1) {
		            empty = false;
		            for (int i = 0; i < readChars; ++i) {
		                if (c[i] == '\n') {
		                    ++count;
		                }
		            }
		        }
		        return (count == 0 && !empty) ? 1 : count;
		    } finally {
		        is.close();
		    }
		}
		
		// pull identifications from input file
		public static Ident[] parseInputFile(){
			
			File inputFile = new File("/users/level3/1002858t/SummerProject2013/generated4.csv");
			Ident[] returnVals = null;
			try {
				returnVals = new Ident[countLines("/users/level3/1002858t/SummerProject2013/generated4.csv")];
			} catch (IOException e1) {
				System.out.println("Problem when counting lines in csv");
				e1.printStackTrace();
			}
			BufferedReader br = null;
			String[] splitLine;
			
			try {
				
				String sCurrentLine;
				int i = 0;
				int j;
				br = new BufferedReader(new FileReader(inputFile));
				
				while ((sCurrentLine = br.readLine()) != null) {
					j = 0;
					splitLine = sCurrentLine.split(",", 0);
					double[] probs = new double[splitLine.length - 2];
					while(j < splitLine.length - 2){
						probs[j] = new Double(splitLine[j + 2]);
						j++;
					}
					returnVals[i] = new Ident(splitLine[0], splitLine[1], probs);
					System.out.println("dealt with " + (i+1) + " entries in csv");
					i++;
				}
	 
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			return returnVals;
		}
		
		// get pathway image from KEGG and display on image panel
		public static void getImg(String pID) throws IOException{
			try{
				URL pathImgUrl = new URL("http://rest.kegg.jp/get/" + pID + "/image");
				pathImg = ImageIO.read(pathImgUrl);
				xScaleFactor = (double)frame.getWidth()/(double)pathImg.getWidth();
				yScaleFactor = (double)frame.getHeight()/(double)pathImg.getHeight();
				ImagePanel.setImage(pathImg, frame.getWidth(), frame.getHeight());
			} catch (MalformedURLException e) {
				System.out.println("URL is malformed: http://rest.kegg.jp/get/" + pID + "/image");
				e.printStackTrace();
			}
		}
		
		// initialize a button with the given attributes
		public static void initButton(Attributes att, JButton button){
			button.setBorderPainted(false);
			button.setMargin(new Insets(0,0,0,0));
			button.setFont(new Font("Dialog", 0, 10));
		    final String linkString = att.getValue("link");
		    button.addActionListener(new ActionListener(){
		        @Override
		        public void actionPerformed(ActionEvent evt) {
		        	try {
						open(new URI(linkString));
					} catch (URISyntaxException e) {
						System.out.println("Invalid URI syntax for: " + linkString);
						e.printStackTrace();
					};
		        }
		    });
		}
		
		// set up visual details of a button
		public static void buttonGraphics(Attributes att, JButton button, String kegg){
			
			button.setText("");
	    	button.setBorderPainted(true);
	    	double w = new Integer(att.getValue("width"));
	    	double h = new Integer(att.getValue("height"));
	    	double prob;
	    	boolean found = false;
	    	
	    	for (Ident id : fileInput){
	    		if (kegg.equalsIgnoreCase(id.getKeggID())){
	    			prob = id.getProbabilities()[0];
	    			
	    			w = w*(1+prob);
	    			h = h*(1+prob);
	    			
		    		button.setBackground(new Color((int)(255*(1-prob)), (int)(255*prob), 0));
		    		button.setToolTipText(id.getName());		    		
		    		found = true;
		    		Ident newIdent = new Ident(id);
		    		buttonDetails.add(newIdent);
		    		break;
		    		}
		    	}
		    	if (!found){
		    		button.setBackground(Color.WHITE);
		    	}
	    	button.setBounds(new Integer((int) ((new Integer((att.getValue("x"))) - w/2)*xScaleFactor)),
    				new Integer((int) ((new Integer((att.getValue("y"))) - h/2)*yScaleFactor)),
    				new Integer((int) ((w)*xScaleFactor)),
    				new Integer((int) ((h)*yScaleFactor)));
		}
		
		// find index of given button name in regButtons
		public static int findInButtons(String target){
			System.out.println(regButtons.size());
			for (int i = 0; i < regButtons.size() - 1; i++){
				System.out.println(regButtons.get(i).getClass());
				if (target.equals(regButtons.get(i).getName())){
					return i;
				}
			}
			return -1;
		}
		
		// find group a given button (index) is in
		public static int findGroup(int regIndex){
			for (ArrayList<Integer> group : relatedGroups){
				for (Integer member : group){
					if (member == regIndex){
						return relatedGroups.indexOf(group);
					}
				}
			}
			return -1;
		}
		
		// add buttons with links onto the panel
		public static void getLinks(String pID){
			
			try {
				 
				SAXParserFactory factory = SAXParserFactory.newInstance();
				SAXParser saxParser = factory.newSAXParser();
				
				DefaultHandler handler = new DefaultHandler() {
					
					boolean entry = false;
					boolean graphics = false;
					boolean relation = false;
					boolean reaction = false;
					String currentKegg;
				 
					public void startElement(String uri, String localName,String qName, 
				                Attributes attributes) throws SAXException {
				 
						if (qName.equalsIgnoreCase("entry")) {
							if (attributes.getValue("type").equalsIgnoreCase("compound")){
								JButton newButton = new RoundButton("");
								newButton.setName(attributes.getValue("id"));
								initButton(attributes, newButton);
								regButtons.add(newButton);
								linkPanel.add(regButtons.get(regButtons.size() - 1));
							} else {
								JButton newButton = new JButton();
								initButton(attributes, newButton);
								regButtons.add(newButton);
								linkPanel.add(regButtons.get(regButtons.size() - 1));
							}
							currentKegg = attributes.getValue("name");
							entry = true;
						}
						
						if (qName.equalsIgnoreCase("graphics")) {
							
							if (attributes.getValue("type").equalsIgnoreCase("circle")){
								JButton theButton = regButtons.get(regButtons.size() - 1);
								buttonGraphics(attributes, theButton, currentKegg);
							}
							graphics = true;
						}
						
						if (qName.equalsIgnoreCase("relation")) {
							relation = true;
						}
						
						if (qName.equalsIgnoreCase("reaction")) {
							
							int currentSub = -1;
							int currentPro = -1;
							int subGroup = -1;
							int proGroup = -1;
							String substrate = attributes.getValue("substrate");
							String product = attributes.getValue("product");
							
							// get location of substrate and product in regButtons
							System.out.println(substrate);
							currentSub = findInButtons(substrate);
							currentPro = findInButtons(product);
							
							// find groups containing substrate and product
							subGroup = findGroup(currentSub);
							proGroup = findGroup(currentPro);
							
							if (subGroup == -1 && proGroup == -1){
								relatedGroups.add(new ArrayList<Integer>());
								relatedGroups.get(relatedGroups.size() - 1).add(currentSub);
								relatedGroups.get(relatedGroups.size() - 1).add(currentPro);
							} else if (subGroup == -1){
								relatedGroups.get(proGroup).add(currentSub);
							} else if (proGroup == -1){
								relatedGroups.get(subGroup).add(currentPro);
							} else {
								// find largest group
								// add smallest group into largest group
							}
							
							reaction = true;
						}
					}
				 
					public void endElement(String uri, String localName,
						String qName) throws SAXException {
					}
				 
					public void characters(char ch[], int start, int length) throws SAXException {
					}
				};
				
				saxParser.parse(new InputSource(new URL("http://rest.kegg.jp/get/" + pID + "/kgml").openStream()), handler);
				
			} catch (Exception e) {
				e.printStackTrace();
			}
	    }

		// open a URI and deal with related exceptions
		private static void open(URI uri) {
		    if (Desktop.isDesktopSupported()) {
		      try {
		        Desktop.getDesktop().browse(uri);
		      } catch (IOException e) { System.out.println(e.toString()); }
		    } else { System.out.println("Desktop not supported"); }
		}
		
		public static void main(String[] args) throws URISyntaxException, IOException{
		
			String pathID = "ko01100";
			fileInput = parseInputFile();
			initComponents();
			getImg(pathID);
			getLinks(pathID);
			frame.validate();
			frame.repaint();
		    frame.setVisible(true);
		}
}
