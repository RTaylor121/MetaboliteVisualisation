

import java.io.File;
import java.io.FileInputStream;
import java.util.Vector;

import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.ScrollPaneConstants;
//import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.math.plot.Plot2DPanel;

import peakml.BackgroundIon;
import peakml.IPeak;
import peakml.IPeakSet;
import peakml.MassChromatogram;
import peakml.io.Header;
import peakml.io.ParseResult;
import peakml.io.peakml.PeakMLParser;

public class PeakPrototypeFrame extends javax.swing.JFrame {

    public PeakPrototypeFrame() {
        initComponents();
    }

    @SuppressWarnings("unchecked")
    private void initComponents() {

    	updateButton = new javax.swing.JButton();
//    	leftList = new javax.swing.JList();
//    	midList = new javax.swing.JList();
//    	rightList = new javax.swing.JList();
        infoTable = new javax.swing.JTable();
    	fileMenu = new javax.swing.JMenu("File");
//        editMenu = new javax.swing.JMenu();
    	menuBar = new javax.swing.JMenuBar();
        leftScroll = new javax.swing.JScrollPane();
        midScroll = new javax.swing.JScrollPane();
        rightScroll = new javax.swing.JScrollPane();
        tabbedPane = new javax.swing.JTabbedPane();
        chromPlot = new Plot2DPanel();
        specPlot = new Plot2DPanel();
//        peakInfoTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

//        leftList.setModel(new javax.swing.AbstractListModel() {
//            String[] strings = {};
//            public int getSize() { return strings.length; }
//            public Object getElementAt(int i) { return strings[i]; }
//        });
//        leftList.addListSelectionListener(new ListSelectionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//            	
//            }
//
//			@Override
//			public void valueChanged(ListSelectionEvent arg0) {
//				// TODO Auto-generated method stub
//				
//			}
//		});
//        leftList.setSize(new java.awt.Dimension(100, 100));
//        leftScroll.setViewportView(leftList);
//
//        midList.setModel(new javax.swing.AbstractListModel() {
//            String[] strings = {};
//            public int getSize() { return strings.length; }
//            public Object getElementAt(int i) { return strings[i]; }
//        });
//        midScroll.setViewportView(midList);
//
//        rightList.setModel(new javax.swing.AbstractListModel() {
//            String[] strings = {};
//            public int getSize() { return strings.length; }
//            public Object getElementAt(int i) { return strings[i]; }
//        });
//        rightScroll.setViewportView(rightList);
        infoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        leftScroll.setViewportView(infoTable);

        updateButton.setText("Update Plots");

        fileMenu.setText("File");
        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(leftScroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
//                .add(midScroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
//                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
//                .add(rightScroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
//                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(tabbedPane)
                    .add(layout.createSequentialGroup()
                        .add(updateButton)
                        .add(0, 544, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(leftScroll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
//            .add(midScroll)
//            .add(rightScroll)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(updateButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tabbedPane)
                .addContainerGap())
        );
        
        chromPlot.setAxisLabels("RT", "Intensity");
		chromPlot.addLegend("EAST");
		chromPlot.removePlotToolBar();
		tabbedPane.addTab("Chromatogram",chromPlot);
		
		specPlot.setAxisLabels("m/z", "Intensity");
//		specPlot.addLegend("EAST");
		specPlot.removePlotToolBar();
		tabbedPane.addTab("Mass Spectrum", specPlot);
		
		updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	chromPlot.removeAllPlots();
        		specPlot.removeAllPlots();
//                updateButtonActionPerformed(evt, leftList);
//                u
            }
		});
		
		menuBar.add(fileMenu);
		JMenuItem openMenuItem = new JMenuItem("Open");
		openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	chromPlot.removeAllPlots();
        		specPlot.removeAllPlots();
//            	openMenuItemActionPerformed(evt, leftList, midList, rightList);
            	newOpenMenuItemActionPerformed(evt);
            	updateTable(infoTable);
            }
		});
		fileMenu.add(openMenuItem);
		JMenuItem exitMenuItem = new JMenuItem("Exit");
		exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	System.exit(0);
            }
		});
		fileMenu.add(exitMenuItem);
		
		midScroll.getVerticalScrollBar().setModel(
				rightScroll.getVerticalScrollBar().getModel());
		leftScroll.getVerticalScrollBar().setModel(
				midScroll.getVerticalScrollBar().getModel());
		
        pack();
    }
    private static void newOpenMenuItemActionPerformed(java.awt.event.ActionEvent evt){
		
		final JFileChooser fc = new JFileChooser();
		
		int returnVal = fc.showOpenDialog(menuBar);
		
		if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
            	ParseResult result = PeakMLParser.parse(new FileInputStream(file), true);
            	Header header = result.header;
    			peakset = (IPeakSet<IPeak>) result.measurement;
    		}
    		catch (Exception e)
    		{
    			e.printStackTrace();
    		}
		}
                System.out.println("finished file reading");
    }
    
    private static void updateTable(javax.swing.JTable table){
    	
		IPeak current;
		String[] columnNames = {"Mass",
                "Intensity",
                "Retention Time",
                "Relation ID"};

		Object[][] tableData = new Object[peakset.size()][4];
		for(int i = 0; i < peakset.size(); i++){
			current = peakset.get(i);
			tableData[i][0] = current.getMass();
			tableData[i][1] = current.getIntensity();
			tableData[i][2] = current.getRetentionTime();
			try{
				tableData[i][3] = current.getAnnotation("relation.id").getValue();
			}
			catch(Exception e){
				tableData[i][3] = "n/a";
			}
		}
		
		table = new javax.swing.JTable(tableData, columnNames);	// set size, location etc. ?
                leftScroll.setViewportView(table);
	}
    
    
    
//    private static void openMenuItemActionPerformed(java.awt.event.ActionEvent evt,
//    		javax.swing.JList lList, javax.swing.JList mList, javax.swing.JList rList){
//		
//    	lList.removeAll();
//		
//		final JFileChooser fc = new JFileChooser();
//		
//		int returnVal = fc.showOpenDialog(menuBar);
//		
//		if (returnVal == JFileChooser.APPROVE_OPTION) {
//            File file = fc.getSelectedFile();
//            try {
//            	ParseResult result = PeakMLParser.parse(new FileInputStream(file), true);
//            	Header header = result.header;
//    			peakset = (IPeakSet<IPeak>) result.measurement;
//    		}
//    		catch (Exception e)
//    		{
//    			e.printStackTrace();
//    		}
//		}
//		IPeak current;
//		Double[] masses = new Double[peakset.size()];
//		Double[] intensities = new Double[peakset.size()];
//		Double[] retTimes = new Double[peakset.size()];
//		for(int i = 0; i<peakset.size(); i++){
//			current = peakset.get(i);
//			masses[i] = current.getMass();
//			intensities[i] = current.getIntensity();
//			retTimes[i] = current.getRetentionTime();
//		}
//		lList.setListData(masses);
//		mList.setListData(intensities);
//		rList.setListData(retTimes);
//	}
    
    private static void updateButtonActionPerformed(java.awt.event.ActionEvent evt, javax.swing.JList list) {
    	
    	int[] selected = list.getSelectedIndices();
		String anno;
    	for (int i : selected){
    			IPeak currentPeak = peakset.get(i);
    			try{
	    			anno = (currentPeak.getAnnotation("relation.id")).getValue();
	    			for (IPeak p : peakset){
	    				if (p.getAnnotation("relation.id").getValue().equals(anno)){
	    					recursive(p);
	    				}
	    			}
    			} catch (NullPointerException npe){
    				recursive(currentPeak);
    			}
    		}
    }
    
    private static void newUpdateButtonActionPerformed(java.awt.event.ActionEvent evt, javax.swing.JTable table){
    	int[] selected = table.getSelectedRows();
		String anno;
    	for (int i : selected){
    			IPeak currentPeak = peakset.get(i);
    			try{
	    			anno = (currentPeak.getAnnotation("relation.id")).getValue();
	    			for (IPeak p : peakset){
	    				if (p.getAnnotation("relation.id").getValue().equals(anno)){
	    					recursive(p);
	    				}
	    			}
    			} catch (NullPointerException npe){
    				recursive(currentPeak);
    			}
    		}
    }
    
	public static void recursive(IPeak peak)
	{
		Class<? extends IPeak> cls = peak.getClass();
		if (cls.equals(IPeakSet.class))
		{
			for (IPeak p : (IPeakSet<IPeak>) peak){
				recursive(p);
			}
		}
		else if (cls.equals(MassChromatogram.class)){
			MassChromatogram mc = (MassChromatogram) peak;
			drawPlot(mc.getPeaks(), peak, 'c');
			drawPlot(peakset.getPeaksInRetentionTimeRange((mc.getRetentionTime())-1, (mc.getRetentionTime())+1), peak, 's');
		}
		else if (cls.equals(BackgroundIon.class))
			;
	}
	
	public static void drawPlot(Vector<IPeak> selectedPeaks, IPeak original, char type){
		
		int count = 0;
		double[] xPoints = new double[selectedPeaks.size()];
		double[] yPoints = new double[selectedPeaks.size()];
		for (IPeak currentPeak : selectedPeaks){
			if (type == 'c')
				xPoints[count] = currentPeak.getRetentionTime();
			else if (type == 's')
				xPoints[count] = currentPeak.getMass();
			yPoints[count] = currentPeak.getIntensity();
			count++;
		}
		Double mass = original.getMass();
		if (type == 'c')
			chromPlot.addLinePlot(mass.toString(), xPoints, yPoints);
		else if (type == 's')
			specPlot.addBarPlot("Mass Spec", xPoints, yPoints);
	}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PeakPrototypeFrame().setVisible(true);
            }
        });
    }
	private static IPeakSet<IPeak> peakset;
	
	private static Plot2DPanel chromPlot;
    private static Plot2DPanel specPlot;

    private javax.swing.JButton updateButton;
//    private javax.swing.JList leftList;
//    private javax.swing.JList midList;
//    private javax.swing.JList rightList;
    private javax.swing.JTable infoTable;
    private javax.swing.JMenu fileMenu;
//    private javax.swing.JMenu editMenu;
    private static javax.swing.JMenuBar menuBar;
    private static javax.swing.JScrollPane leftScroll;
    private javax.swing.JScrollPane midScroll;
    private javax.swing.JScrollPane rightScroll;
    private javax.swing.JTabbedPane tabbedPane;
//    private javax.swing.JTable peakInfoTable;
}
