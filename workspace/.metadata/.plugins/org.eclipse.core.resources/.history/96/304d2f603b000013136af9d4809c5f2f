package model;

import java.util.Vector;

import Link;
import peakml.BackgroundIon;
import peakml.IPeak;
import peakml.IPeakSet;
import peakml.MassChromatogram;

public class PeakStore {

	public static void addLinkData(String anno, int peakIndex){
		System.out.println("ADDING NEW LINK DATA: " + anno);
		String[] annos;
		String[] splitLine;
		Link[] newLinks;
		if (anno.contains(";")){
			 annos = anno.split(";", 0);
			 newLinks = new Link[annos.length];
			 for (int i = 0; i < annos.length; i++){
				 splitLine = annos[i].split(",", 0);
				 if (splitLine.length == 3){
						newLinks[i] = new Link(splitLine[0], "default", null, Double.parseDouble(splitLine[2]), peakIndex);
					} else if (splitLine.length == 4) {
						newLinks[i] = new Link(splitLine[0], splitLine[1], splitLine[2], Double.parseDouble(splitLine[3]), peakIndex);
					}
			 }
		} else {
			newLinks = new Link[1];
			splitLine = anno.split(",", 0);
			if (splitLine.length == 3){
				newLinks[0] = new Link(splitLine[0], "default", null, Double.parseDouble(splitLine[2]), peakIndex);
			} else if (splitLine.length == 4) {
				newLinks[0] = new Link(splitLine[0], splitLine[1], splitLine[2], Double.parseDouble(splitLine[3]), peakIndex);
			}
		}
		linkingData.add(newLinks);
		System.out.println(linkingData.size());
	}
    
    public static void getProbabilityAttributes(){
		
		String annotation;
		linkingData.clear();
		int peakCounter = 0;
		for (IPeak peak : peakset){
			if (peak.getAnnotation("probabilityIdentification") != null){
				annotation = peak.getAnnotation("probabilityIdentification").getValue();
				addLinkData(annotation, peakCounter);
			} else
				System.out.println("no anno");
			peakCounter++;
		}
	}
    
    @SuppressWarnings("unchecked")
	public static void recursive(IPeak peak, char type){
		
		Class<? extends IPeak> cls = peak.getClass();
		if (cls.equals(IPeakSet.class))
		{
			for (IPeak p : (IPeakSet<IPeak>) peak){
				recursive(p, type);
			}
		}
		else if (cls.equals(MassChromatogram.class)){
			MassChromatogram mc = (MassChromatogram) peak;
			if (type == 'c'){
				drawPlot(mc.getPeaks(), peak, type);
			Vector<IPeak> peaksInRT = peakset.getPeaksInRetentionTimeRange((mc.getRetentionTime())-1, (mc.getRetentionTime())+1);
			drawPlot(peaksInRT, peak, 's');
			} else if (type == 'r')
				drawPlot(mc.getPeaks(), peak, type);
		}
		else if (cls.equals(BackgroundIon.class))
			;
	}
}
