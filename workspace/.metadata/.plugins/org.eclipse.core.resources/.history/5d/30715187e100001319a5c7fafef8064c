package viewController;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableCellRenderer;

@SuppressWarnings("serial")
public class LinkingFrame extends JFrame{
	
	JButton updateButton;
	JScrollPane peakScroll, identificationScroll;
	JMenuBar menuBar;
	JMenu fileMenu;
	PeakTableModel peakTM;
    ListSelectionModel peakTableSelectionModel;
    JTable peakTable;

    static int[] currentPeakRows;
	int[] currentIdentificationRows;
	
	ArrayList<Integer> pathLink;
	
	public LinkingFrame() {
        initComponents();
    }

	private void initComponents() {

    	updateButton = new JButton();
        peakScroll = new JScrollPane();
        identificationScroll = new JScrollPane();
        menuBar = new JMenuBar();
    	fileMenu = new JMenu("File");
    	
    	setExtendedState(getExtendedState() | JFrame.MAXIMIZED_BOTH);
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        
        currentPeakRows = new int[0];
    	
    	pathLink = new ArrayList<Integer>();

        peakTM = new PeakTableModel(new Object [][] {},
            new String [] {"Mass",
                    "Intensity",
                    "Retention Time",
                    "Link"});
        peakTable = new JTable(peakTM){
			public Component prepareRenderer(TableCellRenderer renderer, int row, int column)
			{
				Component c = super.prepareRenderer(renderer, row, column);

				if (pathLink.contains(row)){
					c.setBackground(Color.CYAN);
				} else if (isRowSelected(row)){
					c.setBackground(Color.YELLOW);
				} else {
					for (int i : currentPeakRows){
						if (row == i){
							c.setBackground(Color.GREEN);
							return c;
						}
					}
					c.setBackground(Color.WHITE);
				}
				return c;
    		}
        };
        
        peakTableSelectionModel = peakTable.getSelectionModel();
//        tableSelectionModel.addListSelectionListener(new SharedListSelectionHandler());
        peakTable.setSelectionModel(peakTableSelectionModel);
        
        peakScroll.setViewportView(peakTable);

        updateButton.setText("Update Plots");

        fileMenu.setText("File");
        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(peakScroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(updateButton)
                        .add(0, 544, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(peakScroll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(updateButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
        );
		updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
        		int[] selected = peakTable.getSelectedRows();
                updateActionPerformed(selected);
            }
		});
		
		menuBar.add(fileMenu);
//		JMenuItem openPeakMLItem = new JMenuItem("Open PeakML File");
//		openPeakMLItem.addActionListener();
//		fileMenu.add(openPeakMLItem);
//		JMenuItem openIdentificationItem = new JMenuItem("Open Identification File");
//		openIdentificationItem.addActionListener();
//		fileMenu.add(openIdentificationItem);
		JMenuItem exitMenuItem = new JMenuItem("Exit");
		exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	System.exit(0);
            }
		});
		fileMenu.add(exitMenuItem);
		
        pack();
    }
	
	private static void updateActionPerformed(int[] sel){
		
		// call function in 'DataLinking' and send 'sel' as a parameter
		
//		String anno;
//		int count;
//		boolean found;
//		
//		currentPeakRows = new int[sel.length];
//		for (int i = 0; i < sel.length; i++){
//			currentPeakRows[i] = sel[i];
//		}
//		
//		for (int i = 0; i < sel.length; i++){
//			IPeak currentPeak = peakset.get(sel[i]);
//			count = 0;
//			found = false;
//			///////////////////////////////////////////////////////////////////////////////////////			
//			while (count < linkingData.size()){
//				for (Link link : linkingData.get(count)){
//					if (link.getPeakIndex() == sel[i]){
//						for (JButton button : regButtons){
//							if (button.getName().equalsIgnoreCase(link.getKeggID())){
//								currentPathEntries.add(regButtons.indexOf(button));
//								currentPathEntryColours.add(button.getBackground());
//								button.setBackground(Color.YELLOW);
//								System.out.println("Link found for: " + link.getKeggID());
//							}
//						}
//						found = true;
//					}
//				}
//				count++;
//			}
//			
//			if (!found){
//				System.out.println("No linking data found for peak: " + sel[i]);
//			}
//			try{
//    			anno = (currentPeak.getAnnotation("relation.id")).getValue();
//    			if (!anno.equals("-1")){
//    				for (IPeak p : peakset){
//    					if (p.getAnnotation("relation.id").getValue().equals(anno)){
//    						recursive(p, 'r');
//    					}
//    				}
//    			}
//    			recursive(currentPeak, 'c');
//			} catch (NullPointerException npe){
//				recursive(currentPeak, 'c');
//			}
//    	}
    }
}
